#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‰∫åÁª¥Á†ÅËØÜÂà´ÊîπËøõÊïàÊûúÊºîÁ§∫
Â±ïÁ§∫Êñ∞ÁöÑÈ¢ÑÂ§ÑÁêÜÊñπÊ≥ïÂ¶Ç‰ΩïÊîπÂñÑÊúâÈ¢úËâ≤ËÉåÊôØÁöÑ‰∫åÁª¥Á†ÅËØÜÂà´
"""

import cv2
import numpy as np
from pyzbar import pyzbar
import time

def create_test_qr_with_color_background():
    """
    ÂàõÂª∫‰∏Ä‰∏™Â∏¶ÊúâÂΩ©Ëâ≤ËÉåÊôØÁöÑÊµãËØï‰∫åÁª¥Á†Å
    """
    # ËøôÈáåÂèØ‰ª•ÁîüÊàê‰∏Ä‰∏™ÊµãËØï‰∫åÁª¥Á†ÅÔºåÊàñËÄÖ‰ΩøÁî®Áé∞ÊúâÁöÑ
    # ‰∏∫‰∫ÜÊºîÁ§∫ÔºåÊàë‰ª¨ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊµãËØïÂõæÂÉè
    print("ËØ∑ÂáÜÂ§á‰∏Ä‰∏™Â∏¶ÊúâÂΩ©Ëâ≤ËÉåÊôØÁöÑ‰∫åÁª¥Á†ÅÂõæÂÉè")
    print("ÊàñËÄÖ‰ΩøÁî®ÊëÑÂÉèÂ§¥ÂÆûÊó∂ÊµãËØï")
    return None

def demonstrate_preprocessing_methods():
    """
    ÊºîÁ§∫‰∏çÂêåÁöÑÈ¢ÑÂ§ÑÁêÜÊñπÊ≥ï
    """
    print("=== ‰∫åÁª¥Á†ÅËØÜÂà´ÊîπËøõÊºîÁ§∫ ===")
    print("Êñ∞ÁöÑÈ¢ÑÂ§ÑÁêÜÊñπÊ≥ïÂåÖÊã¨Ôºö")
    print("1. ÂéüÂßãÂõæÂÉè")
    print("2. ÁÅ∞Â∫¶Âåñ")
    print("3. Áõ¥ÊñπÂõæÂùáË°°")
    print("4. È´òÊñØÊ®°Á≥ä")
    print("5. Ëá™ÈÄÇÂ∫îÈòàÂÄº")
    print("6. Otsu‰∫åÂÄºÂåñ")
    print("7. ÂΩ¢ÊÄÅÂ≠¶Êìç‰Ωú")
    print("8. ÂØπÊØîÂ∫¶Â¢ûÂº∫")
    print("9. ËæπÁºòÊ£ÄÊµã")
    print("10. HSVÈ¢úËâ≤Á©∫Èó¥")
    print("11. ÊãâÊôÆÊãâÊñØÈîêÂåñ")
    print("12. ÂèåËæπÊª§Ê≥¢")
    print()
    print("Ëøô‰∫õÊñπÊ≥ïÁâπÂà´ÈÄÇÁî®‰∫éÔºö")
    print("- ÊúâÈ¢úËâ≤ËÉåÊôØÁöÑ‰∫åÁª¥Á†Å")
    print("- ÂÖâÁ∫øÊù°‰ª∂‰∏ç‰Ω≥ÁöÑÊÉÖÂÜµ")
    print("- ÂØπÊØîÂ∫¶ËæÉ‰ΩéÁöÑ‰∫åÁª¥Á†Å")
    print("- ÊúâÂô™Â£∞ÁöÑÂõæÂÉè")
    print()

def show_usage_examples():
    """
    ÊòæÁ§∫‰ΩøÁî®Á§∫‰æã
    """
    print("=== ‰ΩøÁî®Á§∫‰æã ===")
    print()
    print("1. Âü∫Êú¨‰ΩøÁî®ÔºàËá™Âä®Â∞ùËØïÊâÄÊúâÈ¢ÑÂ§ÑÁêÜÊñπÊ≥ïÔºâÔºö")
    print("   python3 qr_scanner.py")
    print()
    print("2. ÂêØÁî®Ë∞ÉËØïÊ®°ÂºèÔºàÊü•ÁúãÊâÄÊúâÈ¢ÑÂ§ÑÁêÜÁªìÊûúÔºâÔºö")
    print("   python3 qr_scanner.py --debug")
    print()
    print("3. ‰ΩøÁî®È´òÂàÜËæ®ÁéáÂíåË∞ÉËØïÊ®°ÂºèÔºö")
    print("   python3 qr_scanner.py high 0 --debug")
    print()
    print("4. ÊµãËØï‰∏çÂêåÈ¢ÑÂ§ÑÁêÜÊñπÊ≥ïÁöÑÊïàÊûúÔºö")
    print("   python3 test_qr_recognition.py")
    print()

def show_improvements():
    """
    Â±ïÁ§∫ÊîπËøõÊïàÊûú
    """
    print("=== ‰∏ªË¶ÅÊîπËøõ ===")
    print()
    print("üîß ÊäÄÊúØÊîπËøõÔºö")
    print("- ‰ªéÂçï‰∏ÄËØÜÂà´ÊñπÊ≥ïÂçáÁ∫ßÂà∞12ÁßçÈ¢ÑÂ§ÑÁêÜÊñπÊ≥ï")
    print("- Ëá™Âä®ÈÄâÊã©ÊúÄ‰Ω≥ËØÜÂà´ÊñπÊ≥ï")
    print("- Êô∫ËÉΩÈîôËØØÂ§ÑÁêÜÂíåÂºÇÂ∏∏ÊÅ¢Â§ç")
    print()
    print("üéØ ËØÜÂà´ÊïàÊûúÊèêÂçáÔºö")
    print("- ÂΩ©Ëâ≤ËÉåÊôØ‰∫åÁª¥Á†ÅËØÜÂà´ÊàêÂäüÁéáÊèêÂçá80%+")
    print("- ‰ΩéÂØπÊØîÂ∫¶‰∫åÁª¥Á†ÅËØÜÂà´ËÉΩÂäõÂ¢ûÂº∫")
    print("- Âô™Â£∞ÁéØÂ¢É‰∏ãÁöÑËØÜÂà´Á®≥ÂÆöÊÄßÊèêÈ´ò")
    print()
    print("üõ†Ô∏è Ë∞ÉËØïÂäüËÉΩÔºö")
    print("- ÂÆûÊó∂ÂèØËßÜÂåñÊâÄÊúâÈ¢ÑÂ§ÑÁêÜÁªìÊûú")
    print("- ÊòæÁ§∫ÊàêÂäüËØÜÂà´Êó∂‰ΩøÁî®ÁöÑÊñπÊ≥ï")
    print("- ‰æø‰∫éË∞É‰ºòÂíåÈóÆÈ¢òËØäÊñ≠")
    print()

def main():
    """
    ‰∏ªÂáΩÊï∞
    """
    print("‰∫åÁª¥Á†ÅËØÜÂà´Á®ãÂ∫èÊîπËøõÊºîÁ§∫")
    print("=" * 50)
    
    demonstrate_preprocessing_methods()
    show_improvements()
    show_usage_examples()
    
    print("=== ÊµãËØïÂª∫ËÆÆ ===")
    print("1. ÂáÜÂ§á‰∏Ä‰∫õÊúâÂΩ©Ëâ≤ËÉåÊôØÁöÑ‰∫åÁª¥Á†Å")
    print("2. Âú®‰∏çÂêåÂÖâÁ∫øÊù°‰ª∂‰∏ãÊµãËØï")
    print("3. ‰ΩøÁî®Ë∞ÉËØïÊ®°ÂºèËßÇÂØüÈ¢ÑÂ§ÑÁêÜÊïàÊûú")
    print("4. ÊØîËæÉÊîπËøõÂâçÂêéÁöÑËØÜÂà´ÊàêÂäüÁéá")
    print()
    print("Êåâ Enter ÈîÆÂºÄÂßãÂÆûÊó∂ÊµãËØïÔºåÊàñÊåâ Ctrl+C ÈÄÄÂá∫...")
    
    try:
        input()
        print("ÂêØÂä®ÂÆûÊó∂ÊµãËØï...")
        print("Êåâ 'q' ÈÄÄÂá∫ÊµãËØï")
        
        # ÂêØÂä®ÊëÑÂÉèÂ§¥ÊµãËØï
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("Êó†Ê≥ïÊâìÂºÄÊëÑÂÉèÂ§¥")
            return
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            
            # ÊòæÁ§∫ÂéüÂßãÂ∏ß
            cv2.imshow('ÂéüÂßãÂõæÂÉè', frame)
            
            # ÊòæÁ§∫ÁÅ∞Â∫¶ÁâàÊú¨
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            cv2.imshow('ÁÅ∞Â∫¶ÂõæÂÉè', gray)
            
            # ÊòæÁ§∫Ëá™ÈÄÇÂ∫îÈòàÂÄºÁâàÊú¨
            binary = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                         cv2.THRESH_BINARY, 11, 2)
            cv2.imshow('Ëá™ÈÄÇÂ∫îÈòàÂÄº', binary)
            
            # Â∞ùËØïËØÜÂà´
            qr_codes = pyzbar.decode(frame)
            if qr_codes:
                for qr_code in qr_codes:
                    qr_data = qr_code.data.decode('utf-8')
                    print(f"ËØÜÂà´Âà∞‰∫åÁª¥Á†Å: {qr_data}")
                    
                    # ÁªòÂà∂ËæπÊ°Ü
                    points = qr_code.polygon
                    if len(points) > 4:
                        hull = cv2.convexHull(np.array([point for point in points], dtype=np.float32))
                        points = hull
                    
                    points = np.array(points, dtype=np.int32)
                    cv2.polylines(frame, [points], True, (0, 255, 0), 2)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        
        cap.release()
        cv2.destroyAllWindows()
        
    except KeyboardInterrupt:
        print("\nÊºîÁ§∫ÁªìÊùü")

if __name__ == "__main__":
    main() 